##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Trigonometry')
## DBchapter('Polar coordinates & vectors')
## DBsection('Polar and rectangular coordinates')
## Date('8/12/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "bizarroArithmetic.pl",
   "PGML.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Complex");
Context()->flags->set(
    reduceConstants=>0,
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove(
  qw(sin cos tan sec csc cot acos asin atan asec acsc acot)
);

package NewFunc;
our @ISA = qw(Parser::Function::numeric);

sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}

sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}

sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}

sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}

sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}

sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}

sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}

# done declaring NewFunc::trig functions
package main;

# Make new functions work on formulas as well as numbers
sub cos($) {Parser::Function->call('cos',@_)} 
sub sin($) {Parser::Function->call('sin',@_)} 
sub tan {Parser::Function->call('tan',@_)}
sub sec {Parser::Function->call('sec',@_)} 
sub csc {Parser::Function->call('csc',@_)} 
sub cot {Parser::Function->call('cot',@_)}
sub acos {Parser::Function->call('acos',@_)}
sub asin {Parser::Function->call('asin',@_)}
sub atan {Parser::Function->call('atan',@_)}
sub asec {Parser::Function->call('asec',@_)}
sub acsc {Parser::Function->call('acsc',@_)}
sub acot {Parser::Function->call('acot',@_)}

#  Add the new functions to the Context
Context()->functions->add( 
  cos => {class => 'NewFunc', TeX => '\cos'}, 
  sin => {class => 'NewFunc', TeX => '\sin'},
  tan => {class => 'NewFunc', TeX => '\tan'},
  sec => {class => 'NewFunc', TeX => '\sec'},
  csc => {class => 'NewFunc', TeX => '\csc'},
  cot => {class => 'NewFunc', TeX => '\cot'},
  acos => {class => 'NewFunc', TeX => '\arccos'},
  asin => {class => 'NewFunc', TeX => '\arcsin'},
  atan => {class => 'NewFunc', TeX => '\arctan'},
  asec => {class => 'NewFunc', TeX => '\arcsec'},
  acsc => {class => 'NewFunc', TeX => '\arccsc'},
  acot => {class => 'NewFunc', TeX => '\arccot'},
);

#  End trig functions in degrees
###################################################

do {
    $alpha = non_zero_random(-9,9,1);
    $beta = non_zero_random(-9,9,1);
} until ( $alpha < 0 || $beta < 0 );

$complex = Complex("$alpha+$beta i");
$radicand = $alpha**2 + $beta**2;
$modulus = Formula("sqrt($radicand)");
$argumentRad = $complex->arg;
$argumentDeg = $argumentRad*180/pi;
$euler = Formula("$modulus e^((pi/4)i)");
$polar = Formula("$modulus (cos($argumentDeg)+i*sin($argumentDeg))");

$eulerChecker = sub {
      my ( $correct, $student, $ansHash ) = @_;
      return 0 if $ansHash->{isPreview} || $correct != $student;
      $student = $ansHash->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      $student = Formula("$student"); $correct = Formula("$correct");
      # return 0 unless ($correct == $student); #already covered above
      Context()->flags->set(bizarroPow=>1,bizarroSub=>1,bizarroDiv=>1);
      delete $correct->{test_values};
      delete $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(bizarroPow=>0,bizarroSub=>0,bizarroDiv=>0);
      delete $correct->{test_values};
      delete $student->{test_values};
      Value::Error("Your answer is equivalent to \($complex\), but it is not in the correct form.") unless $OK;
      return $OK;
}; 

# for the solution

$quad = ($alpha>0)? (($beta>0)? "\text{I}" : "\text{IV}" ): (($beta>0)? "\text{II}" : "\text{III}" );

$adjust = ($alpha>0)? (($beta>0)? "" : "" ): (($beta>0)? "+180^{\circ}" : "-180^{\circ}" );
##############################################################
#
#  Text
#
#

BEGIN_PGML

>> ### Convert a Complex Number to Polar Form ### <<

Combining the magnitute and angle calculation gives the polar form of a complex number:
[``` a+bi=r \left(\cos(\theta) + i \sin(\theta)\right) ```]

##### Example: #####

Convert [`-3+7i`] to polar form.

Magnitute: [`\quad||-3+7i||=\sqrt{(-3)^2+7^2}=\sqrt{9+49}=\sqrt{58}`]

Angle: [`\quad\theta=\arctan(\frac 7 {-3})+180^\circ\approx 113.2^\circ`]

Putting magnitute and angle together gives: [`\quad -3+7i\approx \sqrt{58} (\cos(113.2^\circ)+i\sin(113.2^\circ))`]
>> ### Practice ### <<

Convert [`[$complex]`] into polar form, [`r \left(\cos(\theta) + i \sin(\theta)\right) `]: 

[_________________________________________________]{$polar->cmp(checker=>$eulerChecker)}

* Use *degrees* for this problem, _not radians_.
* If you're using decimal approximations, you need to be accurate to _at least 3_ decimal places.

END_PGML

##############################################################
#
#  Answers
#
#

BEGIN_PGML_HINT

[@ LayoutTable(
    [
        ['vector', '`\vec{v}`', '`\langle A, B \rangle`', 'complex number', '`\zeta`', '`\alpha+\beta i`'],
        ['magnitude', '`|| \vec{v} ||`', '`\sqrt{A^2+B^2}`', 'modulus', '`|\zeta|`','`\sqrt{\alpha^2+\beta^2}`'],
        ['direction', '`\theta`', '`\arctan(\frac{B}{A})(+ \pi)`', 'argument', '`\arg(\zeta)`','`\arctan(\frac{\beta}{\alpha})(+ \pi)`'],
        ['unit vector','`\vec{u}`','`\langle \cos(\theta), \sin(\theta) \rangle`','','','`\cos(\arg(\zeta)) + i \sin(\arg(\zeta))`'],
        ['polar form','','`||\vec{v}||\langle \cos(\theta), \sin(\theta) \rangle`','','','`|\zeta| ( \cos(\arg(\zeta))+i \sin(\arg(\zeta)) )`']
    ],
    align => 'r c c | r c c'
)@]***

END_PGML_HINT

##############################################################
#
#  Solutions
#
#

BEGIN_PGML_SOLUTION

The modulus of [`[$complex]`] is 
>>[`\sqrt{([$alpha])^2+([$beta])^2} = \color{green}{[$modulus]}`]. <<
Its vector representation, [`\langle [$alpha],[$beta] \rangle`], is in quadrant [`[$quad]`]. The argument of [`[$complex]`] is 
>>[` \arctan \left(\dfrac{[$beta]}{[$alpha]}\right)[$adjust] =  {\color{blue}{[$argumentDeg]^{\circ}}}`].<<
Therefore the polar form of [`[$complex]`] is [`\color{green}{[$modulus]} (\cos({\color{blue}{[$argumentDeg]^{\circ}}})+i\sin({\color{blue}{[$argumentDeg]^{\circ}}}))`].

END_PGML_SOLUTION



ENDDOCUMENT();        
