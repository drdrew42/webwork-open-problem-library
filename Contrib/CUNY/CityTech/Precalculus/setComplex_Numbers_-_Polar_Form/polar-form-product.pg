##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Trigonometry')
## DBchapter('Polar coordinates & vectors')
## DBsection('Polar and rectangular coordinates')
## Date('8/12/2018')
## Author('K. Andrew Parker')
## Institution('City Tech')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "bizarroArithmetic.pl",
   "PGML.pl",
   "niceTables.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Complex");
Context()->flags->set(
    reduceConstants=>0,
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

Context()->operators->set(
'+' => {class => 'bizarro::BOP::add', isCommand => 1},
'-' => {class => 'bizarro::BOP::subtract', isCommand => 1},
'*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
' *' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'* ' => {class => 'bizarro::BOP::multiply', isCommand => 1},
'/' => {class => 'bizarro::BOP::divide', isCommand => 1},
' /' => {class => 'bizarro::BOP::divide', isCommand => 1},
'/ ' => {class => 'bizarro::BOP::divide', isCommand => 1},
'//' => {class => 'bizarro::BOP::divide', isCommand => 1},
'**' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
'^' => {class => 'bizarro::BOP::power', isCommand => 1, perl=>undef},
);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove(
  qw(sin cos tan sec csc cot acos asin atan asec acsc acot)
);

package NewFunc;
our @ISA = qw(Parser::Function::numeric);

sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}

sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}

sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}

sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}

sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}

sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}

sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}

# done declaring NewFunc::trig functions
package main;

# Make new functions work on formulas as well as numbers
sub cos($) {Parser::Function->call('cos',@_)} 
sub sin($) {Parser::Function->call('sin',@_)} 
sub tan {Parser::Function->call('tan',@_)}
sub sec {Parser::Function->call('sec',@_)} 
sub csc {Parser::Function->call('csc',@_)} 
sub cot {Parser::Function->call('cot',@_)}
sub acos {Parser::Function->call('acos',@_)}
sub asin {Parser::Function->call('asin',@_)}
sub atan {Parser::Function->call('atan',@_)}
sub asec {Parser::Function->call('asec',@_)}
sub acsc {Parser::Function->call('acsc',@_)}
sub acot {Parser::Function->call('acot',@_)}

#  Add the new functions to the Context
Context()->functions->add( 
  cos => {class => 'NewFunc', TeX => '\cos'}, 
  sin => {class => 'NewFunc', TeX => '\sin'},
  tan => {class => 'NewFunc', TeX => '\tan'},
  sec => {class => 'NewFunc', TeX => '\sec'},
  csc => {class => 'NewFunc', TeX => '\csc'},
  cot => {class => 'NewFunc', TeX => '\cot'},
  acos => {class => 'NewFunc', TeX => '\arccos'},
  asin => {class => 'NewFunc', TeX => '\arcsin'},
  atan => {class => 'NewFunc', TeX => '\arctan'},
  asec => {class => 'NewFunc', TeX => '\arcsec'},
  acsc => {class => 'NewFunc', TeX => '\arccsc'},
  acot => {class => 'NewFunc', TeX => '\arccot'},
);

#  End trig functions in degrees
###################################################

do {
    $modulus1 = random(2,9,1);
    $modulus2 = random(2,9,1);
} until ( $modulus1 != $modulus2 );

$argument1 = random(15,345,1);
$argument2 = random(15,345,1);

$polar1 = Formula("$modulus1 (cos($argument1)+i*sin($argument1))");
$polar2 = Formula("$modulus2 (cos($argument2)+i*sin($argument2))");

$modulusProduct = $modulus1*$modulus2;
$argumentProduct = Real($argument1+$argument2); #->with(period=>360);
$polarProduct = Formula("$modulusProduct (cos($argumentProduct) + i*sin($argumentProduct))");

$periodic = sub {
    my ($correct, $student, $ansHash) = @_;
    my $score = (abs($student-$correct)==360 || $student==$correct)?1:0;
    my $correctRad = $correct*pi/180;
    my $absError = abs($student-$correct);
    Value::Error("You're close. Make sure your answer is accurate to three decimal places.") if ($score==0 && ( $absError < 0.1 || abs($absError-360) < 0.1 ) );
    Value::Error("Please give your answer in degrees instead of radians.") if ( $score==0 && ( abs($correctRad-$student) < 0.05 || abs(2*pi - abs($correctRad - $student)) < 0.05 ) );
    Value::Error("Make sure your direction angle is in the proper quadrant.") if ($score==0 && abs($absError-180) < 0.05);
    return $score;
};

$eulerChecker = sub {
      my ( $correct, $student, $ansHash ) = @_;
      return 0 if $ansHash->{isPreview} || $correct != $student;
      $student = $ansHash->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      $student = Formula("$student"); $correct = Formula("$correct");
      # return 0 unless ($correct == $student); #already covered above
      Context()->flags->set(bizarroPow=>1,bizarroMul=>1,bizarroDiv=>1);
      delete $correct->{test_values};
      delete $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(bizarroPow=>0,bizarroMul=>0,bizarroDiv=>0);
      delete $correct->{test_values};
      delete $student->{test_values};
      Value::Error("Your answer is equivalent to \($complex\), but it is not in the correct form.") unless $OK;
      return $OK;
}; 

##############################################################
#
#  Text
#
#

BEGIN_PGML

* Use *degrees* for this problem, _not radians_.
* If you're using decimal approximations, you need to be accurate to _at least 3_ decimal places.

a. [`\zeta_1`] is a complex number with modulus [$modulus1] and argument [`[$argument1]^{\circ}`].

    Write [`\zeta_1`] in polar form: [______________________________]{$polar1->cmp(checker=>$eulerChecker)}

b. [`\zeta_2`] is a complex number with modulus [$modulus2] and argument [`[$argument2]^{\circ}`].

    Write [`\zeta_2`] in polar form: [______________________________]{$polar2->cmp(checker=>$eulerChecker)}

c. Use what we know about [`\zeta_1`] and [`\zeta_2`] to answer the following questions about [`\zeta_1 \cdot \zeta_2`]:

    What is the modulus of [`\zeta_1 \cdot \zeta_2`]? [___________]{$modulusProduct}
    
    What is the argument of [`\zeta_1 \cdot \zeta_2`]? [___________]{$argumentProduct->cmp(checker=>$periodic)}
    
    Write [`\zeta_1 \cdot \zeta_2`] in polar form: [_________________________________]{$polarProduct->cmp(checker=>$eulerChecker)}



END_PGML





##############################################################
#
#  Answers
#
#



##############################################################
#
#  Hints
#
#


BEGIN_PGML_HINT

* A complex number [`\zeta`] with modulus [`r`] and argument [`\theta`] can be expressed as:

 [`\qquad\qquad \star \quad r(\cos\theta+i\sin\theta) \qquad`]  (the polar form) or

[`\qquad\qquad \star \quad (r\cos\theta)+(r\sin\theta)i \qquad`]  ([`a+bi`] form).

* If [`\color{red}{\zeta_1=r_1(\cos\theta_1+i\sin\theta_1)}`] and [`\color{blue}{\zeta_2=r_2(\cos\theta_2+i\sin\theta_2)}`]  then
>>[`\color{red}{\zeta_1}\cdot\color{blue}{\zeta_2}=\color{red}{r_1}\color{blue}{r_2}(\cos(\color{red}{\theta_1}+\color{blue}{\theta_2})+i\sin(\color{red}{\theta_1}+\color{blue}{\theta_2}))`]. <<
The modulus of [`\color{green}{\zeta_1\cdot\zeta_2}`] is  [`\color{green}{r_1r_2}`], and the argument of [`\color{green}{\zeta_1\cdot\zeta_2}`] is [`\color{green}{\theta_1+\theta_2}`].


END_PGML_HINT

##############################################################
#
#  Solutions
#
#



BEGIN_PGML_SOLUTION

a. [`\color{red}{\zeta_1}`] is a complex number with modulus [`\color{red}{[$modulus1]}`] and argument [`\color{red}{[$argument1]^{\circ}}`]. The polar form of [`\color{red}{\zeta_1}`] is [` \color{red}{[$modulus1]}(\cos \color{red}{[$argument1]^{\circ}}+i\sin\color{red}{[$argument1]^{\circ}})`].

b. [`\color{blue}{\zeta_2}`] is a complex number with modulus [`\color{blue}{[$modulus2]}`] and argument [`\color{blue}{[$argument2]^{\circ}}`]. The polar form of [`\color{blue}{\zeta_2}`] is [` \color{blue}{[$modulus2]}(\cos \color{blue}{[$argument2]^{\circ}}+i\sin\color{blue}{[$argument2]^{\circ}})`].

c. The modulus of [`\color{green}{\zeta_1 \cdot \zeta_2}`] is

>> [`|\color{green}{\zeta_1 \cdot \zeta_2}| = |\color{red}{\zeta_1}| \cdot |\color{blue}{\zeta_2}| = \color{red}{[$modulus1]} \cdot \color{blue}{[$modulus2]} =  \color{green}{[$modulusProduct]}`]<<
    
The argument of [`\color{green}{\zeta_1 \cdot \zeta_2}`] is

>> [`\arg(\color{green}{\zeta_1 \cdot \zeta_2}) = \arg(\color{red}{\zeta_1}) + \arg(\color{blue}{\zeta_2}) = \color{red}{[$argument1]^{\circ}} +  \color{blue}{[$argument2]^{\circ}} =  \color{green}{[$argumentProduct]^{\circ}}`] <<
   
    
The polar form of [`\color{green}{\zeta_1 \cdot \zeta_2}`] is 
[` \color{green}{[$modulusProduct]}(\cos \color{green}{[$argumentProduct]^{\circ}}+i\sin\color{green}{[$argumentProduct]^{\circ}})`].


END_PGML_SOLUTION

ENDDOCUMENT();        
