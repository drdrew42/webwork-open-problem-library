##DESCRIPTION
##   
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Geometry')
## DBchapter('Vector geometry')
## DBsection('Dot product, length, and unit vectors')
## Date('7/30/2002')
## Author('K. Andrew Parker')
## Institution('City Tech')
########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl",
   "answerHints.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Vector");

Context()->flags->set(
    reduceConstants=>0, 
    reduceConstantFunctions=>0,
    tolType=>'absolute',
    tolerance=>0.0005);

$close = AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.", score=>0.25],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.", score=>0.25]
);

##############################################
#  Begin trig functions in degrees

Context()->functions->remove(
  qw(sin cos tan sec csc cot acos asin atan asec acsc acot)
);

package NewFunc;
our @ISA = qw(Parser::Function::numeric);

sub cos {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180);
}

sub sin {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180);
}

sub tan {
  shift; my $x = shift;
  return CORE::sin($x*3.14159265358979/180)/CORE::cos($x*3.14159265358979/180);
}

sub sec {
  shift; my $x = shift;
  return 1.0/CORE::cos($x*3.14159265358979/180);
}

sub csc {
  shift; my $x = shift;
  return 1.0/CORE::sin($x*3.14159265358979/180);
}

sub cot {
  shift; my $x = shift;
  return CORE::cos($x*3.14159265358979/180)/CORE::sin($x*3.14159265358979/180);
}

sub acos {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
sub asin {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
sub atan {CORE::atan2($_[1],1)*180/3.14159265358979}
sub asec {CORE::atan2($_[1],CORE::sqrt(1-$_[1]*$_[1]))*180/3.14159265358979}
sub acsc {CORE::atan2(CORE::sqrt(1-$_[1]*$_[1]),$_[1])*180/3.14159265358979}
sub acot {CORE::atan2(1,$_[1])*180/3.14159265358979}

# done declaring NewFunc::trig functions
package main;

# Make new functions work on formulas as well as numbers
sub cos($) {Parser::Function->call('cos',@_)} 
sub sin($) {Parser::Function->call('sin',@_)} 
sub tan {Parser::Function->call('tan',@_)}
sub sec {Parser::Function->call('sec',@_)} 
sub csc {Parser::Function->call('csc',@_)} 
sub cot {Parser::Function->call('cot',@_)}
sub acos {Parser::Function->call('acos',@_)}
sub asin {Parser::Function->call('asin',@_)}
sub atan {Parser::Function->call('atan',@_)}
sub asec {Parser::Function->call('asec',@_)}
sub acsc {Parser::Function->call('acsc',@_)}
sub acot {Parser::Function->call('acot',@_)}

#  Add the new functions to the Context
Context()->functions->add( 
  cos => {class => 'NewFunc', TeX => '\cos'}, 
  sin => {class => 'NewFunc', TeX => '\sin'},
  tan => {class => 'NewFunc', TeX => '\tan'},
  sec => {class => 'NewFunc', TeX => '\sec'},
  csc => {class => 'NewFunc', TeX => '\csc'},
  cot => {class => 'NewFunc', TeX => '\cot'},
  acos => {class => 'NewFunc', TeX => '\arccos'},
  asin => {class => 'NewFunc', TeX => '\arcsin'},
  atan => {class => 'NewFunc', TeX => '\arctan'},
  asec => {class => 'NewFunc', TeX => '\arcsec'},
  acsc => {class => 'NewFunc', TeX => '\arccsc'},
  acot => {class => 'NewFunc', TeX => '\arccot'},
);

#  End trig functions in degrees
###################################################

foreach my $i (0..3) {
    my $j = ($i>1)?1:0; # get one vector in each quadrant
    $x[$i] = random(2,15,1)*(-1)**$i;
    $y[$i] = random(2,15,1)*(-1)**$j;
    $vector[$i] = Vector("<$x[$i],$y[$i]>");
    $radicand[$i] = $x[$i]**2 + $y[$i]**2;
    $mag[$i] = Formula("sqrt($radicand[$i])");
    my $adjustQuadrant = ($y[$i]<0)? 1 : 0; # adjust angle for Q2 & Q3
    $dir[$i] = atan($y[$i]/$x[$i]) + 180*$adjustQuadrant;
}

##############################################################
#
#  Text
#
#

BEGIN_PGML

Determine the magnitude of each vector:

* Use "sqrt( )" to denote [`\sqrt{}`]
* If you use a decimal approximation, you must be accurate to at least 3 decimal places.

a. [`\lVert [$vector[0]] \rVert`] = [__________]{$mag[0]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.", score=>0.25],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.", score=>0.25]
))}

b. [`\lVert [$vector[1]] \rVert`] = [__________]{$mag[1]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.", score=>0.25],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.", score=>0.25]
))}

c. [`\lVert [$vector[2]] \rVert`] = [__________]{$mag[2]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.", score=>0.25],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.", score=>0.25]
))}

d. [`\lVert [$vector[3]] \rVert`] = [__________]{$mag[3]->cmp()->withPostFilter(AnswerHints(
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs($correct-$student) < 0.05 );
    } => ["You're close. Make sure your answer is accurate to three decimal places.", score=>0.25],
    sub {
        my ($correct, $student, $ansHash) = @_;
        return ( abs(180*$student/pi - $correct ) < 0.05 );
    } => ["Please give your answer in degrees instead of radians.", score=>0.25]
))}



END_PGML

##############################################################
#
#  Answers
#
#



##############################################################
#
#  Hints
#
#

BEGIN_PGML_HINT

* Think of the magnitude as being the hypotenuse of the right triangle whose legs are determined by the given vector.

END_PGML_HINT

##############################################################
#
#  Solutions
#
#


BEGIN_PGML_SOLUTION

a. [`\lVert [$vector[0]] \rVert = \sqrt{([$x[$0]])^2+([$y[$0]])^2}
=[$mag[0]]`]

a. [`\lVert [$vector[1]] \rVert = \sqrt{([$x[1]])^2+([$y[1]])^2}
=[$mag[1]]`]

a. [`\lVert [$vector[2]] \rVert = \sqrt{([$x[2]])^2+([$y[2]])^2}
=[$mag[2]]`]

a. [`\lVert [$vector[3]] \rVert = \sqrt{([$x[3]])^2+([$y[3]])^2}
=[$mag[3]]`]


END_PGML_SOLUTION



ENDDOCUMENT();        
